<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.IO" #>
<#@ output extension="generated.cs" #>
<# 

var filename = this.Host.ResolvePath(@"Schema\StatusCodes.csv");
var comma = new[] { ',' };
var quote = new[] { '\"' };

var fields = File.ReadAllLines(filename).Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => {
    var s = x.Split(comma, 3);
    return new { Name = s[0], Value = s[1], Message = s[2] };
});

#>// <auto-generated/>

using Workstation.ServiceModel.Ua;

#nullable enable

namespace Jaahas.OpcUa.JsonEncoding {

    /// <summary>
    /// Extension methods for the <see cref="StatusCode"/> enumeration.
    /// </summary>
    internal static class StatusCodeExtensions {

        /// <summary>
        /// Gets the symbol name for the status code.
        /// </summary>
        /// <param name="statusCode">
        ///   The status code.
        /// </param>
        /// <returns>
        ///   The symbol name, or <see langword="null"/> if the status code is not recognised.
        /// </returns>
        /// <remarks>
        ///   When encoding <see cref="StatusCode"/> instances using non-reversible OPC UA JSON 
        ///   encoding, both the status code value and its symbol name are included in the generated 
        ///   JSON.
        /// </remarks>
        internal static string? GetSymbolName(this StatusCode statusCode) {
            return statusCode.Value switch {
                0x00000000 => "Good",
<# foreach (var f in fields) { #>
                <#= f.Value #> => "<#= f.Name #>",
<# } #>
                _ => null
            };
        }

    }
}
